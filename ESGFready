#!/usr/bin/python
# This script will check if your operating system is ready to download and visualize data from ESGF
# Author: Arildo Oliveira

import os
import subprocess
import sys
import time

# variables
os_name = subprocess.check_output('uname', shell=True)
apt_system_list = ['Ubuntu', 'Xubuntu', 'Kubuntu', 'Lubuntu', 'Debian']
yum_system_list = ['Fedora', 'Red', 'Korora', 'CentOS']
os_wget = None
os_java = None
os_grads = None
os_ncview = None
os_xcode = None
os_xcode_clt = None
os_homebrew = None
flag_install_wget = None
flag_install_java = None
flag_install_grads = None
flag_install_ncview = None


# defs
def clear_cli():  # clears the terminal
    os.system('cls' if os.name == 'nt' else 'clear')


def check_wget_linux():
    global os_distro
    global apt_system_list
    global yum_system_list
    global os_wget

    print("\nChecking if wget is installed...")
    if (os_distro in yum_system_list):
        wget_status = subprocess.check_output("echo $(yum list installed wget 2>/dev/null | grep -c 'Installed Packages')", shell=True)
    if (os_distro in apt_system_list):
        wget_status = subprocess.check_output("echo $(dpkg-query -W -f='${Status}' wget 2>/dev/null | grep -c 'ok installed')", shell=True)
    if ('1' in wget_status):
        print("Wget is already installed")
    elif ('0' in wget_status):
        print("Wget is not installed, installing...")
        try:
            if (os_distro in yum_system_list):
                os.system('yum install -y wget &>/dev/null')
            elif (os_distro in apt_system_list):
                os.system('apt-get install -y wget &>/dev/null')
            flag_install_wget = True
        except os.error:
            print("An error has ocurred, please try again")
            sys.exit()
        print("Wget installed")
    os_wget = True


def check_java_linux():
    global os_distro
    global apt_system_list
    global yum_system_list
    global os_java

    print("\nChecking if Java is installed...")
    java_status = subprocess.check_output("echo $(java -version 2>&1)", shell=True)
    if ('openjdk' in java_status and ('1.8' in java_status or '1.7' in java_status)):
        print("OpenJDK is already installed")
        os_java = True
    elif (("Java(TM)" in java_status) and ('1.8' in java_status or '1.7' in java_status)):
        print("Oracle Java is already installed")
        os_java = True
    else:
        print("No Java JDK found, installing...\n")
        if (os_distro in apt_system_list):
            install_java_apt()
        elif (os_distro in yum_system_list):
            install_java_yum()


def install_java_apt():
    global os_java
    global flag_install_java
    try:
        print("\nThe script will install Java JDK 8 in your system")
        print("Please accept the License Agreement when prompted")
        raw_input('\nPress any key to continue...')
        os.system("add-apt-repository -y ppa:webupd8team/java")
        os.system("apt-get update")
        os.system("apt-get install -y oracle-java8-installer")
        os.system("apt-get install -y oracle-java8-set-default")
        flag_install_java = True
    except os.error:
        print("An error has ocurred, please try again")
        sys.exit()
    clear_cli()
    print("Java installed")
    os_java = True


def install_java_yum():
    global os_java
    global flag_install_java
    try:
        os.system("rm /opt/jdk*.tar.gz &>/dev/null")  # removes any compressed jdk files downloaded before
        os_arch = subprocess.check_output("uname -m | grep -c 64", shell=True)  # checks if the os is 64 or 32bit
        if ("1" in os_arch):
            os.system('wget --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie" "http://download.oracle.com/otn-pub/java/jdk/8u45-b14/jdk-8u45-linux-x64.tar.gz" -P /opt')
            os.system('tar xzf /opt/jdk-8u45-linux-x64.tar.gz -C /opt')
        elif ("0" in os_arch):
            os.system('wget --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie" "http://download.oracle.com/otn-pub/java/jdk/8u45-b14/jdk-8u45-linux-i586.tar.gz" -P /opt')
            os.system('tar xzf /opt/jdk-8u45-linux-i586.tar.gz -C /opt')
        os.system("rm /opt/jdk*.tar.gz &>/dev/null")
        os.system('alternatives --install /usr/bin/java java /opt/jdk1.8.0_45/bin/java 2')
        print('Java installed, configuring...')

        time.sleep(2)

        print('\nJava needs to be set manually, please choose the latest version when prompted')
        raw_input('\nPress any key to continue...')
        clear_cli()
        print('Choose the latest version\n')
        os.system('alternatives --config java')
        os.system('alternatives --install /usr/bin/jar jar /opt/jdk1.8.0_45/bin/jar 2')
        os.system('alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_45/bin/javac 2')
        os.system('alternatives --set jar /opt/jdk1.8.0_45/bin/jar')
        os.system('alternatives --set javac /opt/jdk1.8.0_45/bin/javac')

        print("Finished installing Java\n")
        os.system('java -version')

        # sets environment variables
        os.system('chmod 777 /etc/profile.d/custom.sh')
        os.system('export JAVA_HOME=/opt/jdk1.8.0_45')
        os.system('export JRE_HOME=/opt/jdk1.8.0_45/jre')
        os.system('export PATH=$PATH:/opt/jdk1.8.0_45/bin:/opt/jdk1.8.0_45/jre/bin')
        os.system('echo " " >> /etc/profile.d/custom.sh')
        os.system('echo "export JAVA_HOME=/opt/jdk1.8.0_45" >> /etc/profile.d/custom.sh')
        os.system('echo "export JRE_HOME=/opt/jdk1.8.0_45/jre" >> /etc/profile.d/custom.sh')
        os.system('echo "export PATH=$PATH:/opt/jdk1.8.0_45/bin:/opt/jdk1.8.0_45/jre/bin" >> /etc/profile.d/custom.sh')
        flag_install_java = True
    except os.error:
        print("An error has ocurred, please try again")
        sys.exit()
    print("\nJava installed")
    os_java = True


def ask_for_grads():
    global flag_install_grads
    answer = raw_input("\nDo you want to install grads? [y/n] ")
    print("")
    if ("y" in answer):
        print("The script will install grads")
        flag_install_grads = True
    elif ("n" in answer):
        print("The script will not install grads")
        flag_install_grads = False


def install_grads_linux():
    global os_grads
    try:
        if (os_distro in yum_system_list):
            os.system('yum install -y grads &>/dev/null')
        elif (os_distro in apt_system_list):
            os.system('apt-get install -y grads &>/dev/null')
    except os.error:
        print("An error has ocurred, please try again")
        sys.exit()
    os_grads = True


def ask_for_ncview():
    global flag_install_ncview
    answer = raw_input("\nDo you want to install ncview? [y/n] ")
    print("")
    if ("y" in answer):
        print("The script will install ncview &>/dev/null")
        flag_install_ncview = True
    elif ("n" in answer):
        print("The script will not install ncview &>/dev/null")
        flag_install_ncview = False


def install_ncview_linux():
    global os_ncview
    try:
        if (os_distro in yum_system_list):
            os.system('yum install -y ncview')
        elif (os_distro in apt_system_list):
            os.system('apt-get install -y ncview')
    except os.error:
        print("An error has ocurred, please try again")
        sys.exit()
    os_ncview = True
# end of defs

# main
clear_cli()
if 'root' not in subprocess.check_output('whoami', shell=True):  # check if the script has the right privileges
    print("Must be root to execute the script" +
          "\n[Usage]: sudo ./ESGFready")
    sys.exit()

print('This script will check if your system is ready to download and visualize data from ESGF')
raw_input('\nPress any key to start...')

if ('Darwin' in os_name):  # os is mac
    print('mac')

elif ('Linux' in os_name):  # os is linux
    os_distro = subprocess.check_output('cat /etc/issue', shell=True).split()[0]
    print('Operating System: ')
    print(os_distro)
    check_wget_linux()
    check_java_linux()
    ask_for_grads()
    if (flag_install_grads):
        install_grads_linux()
    ask_for_ncview()
    if (flag_install_ncview):
        install_ncview_linux()

    clear_cli()

    print("Installation summary:\n")
    if (flag_install_wget and os_wget):
        print("\tWget [OK]")
    elif (flag_install_wget is None and os_wget):
        print("\tWget [already installed]")

    if (flag_install_java and os_java):
        print("\tJava [OK]" +
              "\n\t\tThe Java installation changed your system's environment variables" +
              "\n\t\tPlease reopen the terminal" +
              "\n\t\tOr log out and log back in")
    elif (flag_install_java is None and os_java):
        print("\tJava [already installed]")

    if (flag_install_grads and os_grads):
        print("\tGrads [OK]")
    elif (flag_install_grads is False):
        print("\tGrads [user has chosen not to install]")

    if (flag_install_ncview and os_ncview):
        print("\tNcview [OK]")
    elif (flag_install_ncview is False):
        print("\tNcview [user has chosen not to install]")

    print("\n\nScript finished")

else:  # os is windows
    print('windows')
